<?php

namespace AppBundle\Repository;

use AppBundle\Entity\AttributesDefinition;
use AppBundle\Entity\Campaign;

/**
 * CampaignRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CampaignRepository extends \Doctrine\ORM\EntityRepository
{
    public function findValues($cid, $settings = []){

        $q = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('c')
            ->from('AppBundle:Campaign', 'c');

        foreach ($settings as $setting){

            switch ($setting->getAttrClass()){
                case AttributesDefinition::IS_IMAGE:
                    $q->addSelect('im')
                        ->leftJoin('AppBundle:Image', 'im', 'WITH', 'im.belongsToObjectId = c.id');
                    break;
                case AttributesDefinition::IS_FILE:
                    $q->addSelect('fl')
                        ->leftJoin('AppBundle:File', 'fl', 'WITH', 'fl.belongsToObjectId = c.id');
                    break;
                case AttributesDefinition::IS_TEXT:
                    $q->addSelect('pi')
                        ->leftJoin('AppBundle:ParentInfo', 'pi', 'WITH', 'pi.belongsToObjectId = c.id');
                    break;
                case AttributesDefinition::IS_LIST:
                    $q->addSelect('lv')
                        ->leftJoin('AppBundle:ListValues', 'lv', 'WITH', 'lv.belongsToObject = c.id');
                    break;
                default:
                    break;
            }

        }
        $q->where('c.id = :cid')
            ->setParameter('cid', $cid);
            return $q->getQuery()->getResult();

    }

    public function findMin(){
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('cmp')
            ->from('AppBundle:Campaign', 'cmp')
            ->orderBy('cmp.id', 'ASC')
            ->setMaxResults(1)
            ->getQuery()->getOneOrNullResult();
    }

    /**
     * This function use to get active cmp
     * @return Campaign|null
     */
    public function findActual($update = null)
    {
        $em = $this->getEntityManager();
        $cmp =  $this->getEntityManager()
            ->createQueryBuilder()
            ->select('cmp, settings, attrDef')
            ->from('AppBundle:Campaign', 'cmp')
            ->leftJoin('cmp.settings', 'settings')
            ->leftJoin('settings.attributesDefinition', 'attrDef')
            ->where('cmp.state = :stt')
            ->andWhere('settings.isEnable = 1')
            ->orderBy('cmp.id', '')
            ->orderBy('settings.sortOrdering', 'ASC')
            ->setParameter('stt', Campaign::IS_ACTIVE)
            ->getQuery();
        $kay = (string)md5($cmp->getDQL());

//        $cmp->getResult();

        $cacheDriver = $em->getConfiguration()->getResultCacheImpl();
        // create kay for cache id
        $cacheId = (string)$kay;


        if($update != null)
        {
            // check cache enable
            if ($cacheDriver) {
                // check isset data in cache
                if ($cacheDriver->contains($cacheId)) {
                    // delete data from cache
                    $cacheDriver->delete($cacheId);
                }
            }
        }
        else{
            // check cache enable
            if ($cacheDriver) {
                // check isset data in cache
                if ($cacheDriver->contains($cacheId)) {
                    // return data fro cache
//                    $cmp->fetch($cacheId);
                    return $this->calcActual($cacheDriver->fetch($cacheId))
                        ;
                }
            }
        }
        $livetime = 3600;
        // create query by dql
//        $cmp->getResult();
        // enable result cache
        $cmp->useResultCache(true, $livetime, $cacheId);
        // get result
        $visions = $cmp->getResult();

        if ($cacheDriver && $visions !== null) {
            //
            // Caching the hydrated result will save about 80% of loading time.
            //
            $cacheDriver->save($cacheId, $visions, $livetime);
        }

        return $this->calcActual($visions);



    }

    public function calcActual($cmp){
        $campaign = null;

        foreach ($cmp as $item){
            if($item instanceof Campaign){
                $campaign = $item;
            }
            if($item instanceof AttributesDefinition){
                $campaign->addAttributesDefinition($item);
            }
        }
        return $campaign;
    }
    /**
     * This function use to get active cmp
     * @return Campaign|null
     */
    public function findDraft($tempSlug)
    {
        $cmp =  $this->getEntityManager()
            ->createQueryBuilder()
            ->select('cmp, settings, attrDef')
            ->from('AppBundle:Campaign', 'cmp')
            ->leftJoin('cmp.settings', 'settings')
            ->leftJoin('settings.attributesDefinition', 'attrDef')
            ->where('cmp.state = :stt')
            ->andWhere('cmp.tempSlug = :tsl')
            ->andWhere('settings.isEnable = 1')
            ->orderBy('cmp.id', '')
            ->orderBy('settings.sortOrdering', 'ASC')
            ->setParameter('stt', Campaign::IS_DRAFT)
            ->setParameter('tsl', $tempSlug)
            ->getQuery()
            ->getResult();

        $campaign = null;

            foreach ($cmp as $item){
                if($item instanceof Campaign){
                    $campaign = $item;
                }
                if($item instanceof AttributesDefinition){
                    $campaign->addAttributesDefinition($item);
                }
            }
            return $campaign;

    }

    public function getActive()
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('cmp,tv')
            ->from('AppBundle:Campaign', 'cmp')
            ->leftJoin('AppBundle:ListValues', 'lv', 'WITH', 'lv.belongsToObject = cmp.id')
            ->innerJoin('AppBundle:TextValues', 'tv', 'WITH', 'tv.belongsToObject = lv.id AND tv.title LIKE :cid')
            ->where('cmp.state = :stt')
            ->setParameter('stt', Campaign::IS_ACTIVE)
            ->setParameter('cid', '%Campaign Id%')
            ->getQuery()
            ->getResult();
    }

    public function findDataById($objectId){
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('cmp, cs')
            ->from('AppBundle:Campaign', 'cmp')
            ->leftJoin('cmp.settings', 'cs')
            ->where('cmp.id = :cId')
            ->orderBy('cs.sortOrdering', 'ASC')
            ->setParameter('cId', $objectId)
            ->getQuery()
            ->getResult();

    }
}
