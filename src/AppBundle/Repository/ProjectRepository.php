<?php

namespace AppBundle\Repository;

use AppBundle\Entity\AttributesDefinition;
use AppBundle\Entity\Project;

/**
 * ProjectRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProjectRepository extends \Doctrine\ORM\EntityRepository
{
    public function findMin(){
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('cmp')
            ->from('AppBundle:Project', 'cmp')
            ->orderBy('cmp.id', 'ASC')
            ->setMaxResults(1)
            ->getQuery()->getOneOrNullResult();
    }

    public function findDataById($objectId){
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('cmp, settings')
            ->from('AppBundle:Project', 'cmp')
            ->leftJoin('cmp.settings', 'settings')
            ->where('cmp.id = :cId')
            ->orderBy('cmp.id')
            ->addOrderBy('settings.sortOrdering')
            ->setParameter('cId', $objectId)
            ->getQuery()
            ->getResult();

    }

    public function findActual($slug)
    {
        $cmp =  $this->getEntityManager()
            ->createQueryBuilder()
            ->select('cmp, settings, attributesDefinition')
            ->from('AppBundle:Project', 'cmp')
            ->leftJoin('cmp.settings', 'settings')
            ->leftJoin('settings.attributesDefinition', 'attributesDefinition')
            ->where('cmp.slug = :slg')
            ->andWhere('cmp.state != :st')
            ->setParameter('slg', $slug)
            ->setParameter('st', Project::IS_DRAFT)
            ->getQuery()
            ->getResult();

        $campaign = null;

        foreach ($cmp as $item){
            if($item instanceof Project){
                $campaign = $item;
            }
            if($item instanceof AttributesDefinition){
                $campaign->addAttributesDefinition($item);
            }
        }
        return $campaign;

    }

    public function findDraftActual($slug)
    {
        $cmp =  $this->getEntityManager()
            ->createQueryBuilder()
            ->select('cmp, settings, attributesDefinition')
            ->from('AppBundle:Project', 'cmp')
            ->leftJoin('cmp.settings', 'settings')
            ->leftJoin('settings.attributesDefinition', 'attributesDefinition')
            ->where('cmp.tempSlug = :slg')
            ->andWhere('cmp.state = :st')
            ->setParameter('slg', $slug)
            ->setParameter('st', Project::IS_DRAFT)
            ->getQuery()
            ->getResult();

        $campaign = null;

        foreach ($cmp as $item){
            if($item instanceof Project){
                $campaign = $item;
            }
            if($item instanceof AttributesDefinition){
                $campaign->addAttributesDefinition($item);
            }
        }
        return $campaign;

    }


    /**
     * @return array
     */
    public function findCategories()
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('p, s, attr, lv, txt, im, dt')
            ->from('AppBundle:Project', 'p')
            ->leftJoin('p.settings', 's')
            ->leftJoin('s.attributesDefinition', 'attr')
            ->join('AppBundle:ListValues', 'lv',
                'WITH', 'lv.belongsToObject = p.id AND lv.name = attr.attrName')
            ->leftJoin('lv.image', 'im', 'WITH' ,'im.fileName IS NOT NULL AND LENGTH(im.fileName)>1 ')
            ->leftJoin('lv.text', 'txt', 'WITH' ,'txt.value IS NOT NULL AND LENGTH(txt.value) >1 AND txt.value != txt.title ')
            ->leftJoin('lv.date', 'dt', 'WITH' ,'dt.value IS NOT NULL')
            ->where('p.state != :st')
            ->andWhere('lv.belongsToObjectName = :pr')
            ->orderBy('p.sortOrderDate', 'DESC')
            ->setParameter('st', Project::IS_DRAFT)
            ->setParameter('pr', AttributesDefinition::IS_PROJECT)
            ->getQuery()->getResult()
            ;

    }

    /**
     *
     * @param $objectId
     *
     */
    public function updateInfo($objectId, $date){

        if(!$date){

            $date = new \DateTime('now');
            $date = $date->format('Y-m-d h:i:s');
        }
        $this->getEntityManager()
            ->createQueryBuilder()
            ->update('AppBundle:Project', 'cv')
            ->set('cv.sortOrderDate', ':lb')
            ->where('cv.id = :oldLb')
            ->setParameter('lb', $date)
            ->setParameter('oldLb', $objectId)
            ->getQuery()->execute()
        ;
    }

}
