<?php

namespace AppBundle\Repository;

/**
 * AttributesDefinitionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AttributesDefinitionRepository extends \Doctrine\ORM\EntityRepository
{
    public function findByObject($objSlug){
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('adef')
            ->from('AppBundle:AttributesDefinition', 'adef')
            ->where('adef.objectName = :objn')
            ->orderBy('adef.moderatorSortOrder', 'ASC')
            ->setParameter('objn', $objSlug)
            ->getQuery()->getResult()
            ;
    }

    public function findByObjectType($objType, $objId){

        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('adef')
            ->from('AppBundle:AttributesDefinition', 'adef')
            ->where('adef.objectName = :objTp')
            ->andWhere('adef.belongsToObject = :objId')
            ->andWhere('adef.status = 1')
//            ->orderBy('adef.moderatorSortOrder', 'ASC')
            ->setParameter('objTp', $objType)
            ->setParameter('objId', $objId)
            ->getQuery()->getResult()
            ;
    }

    public function findMax($type = null){

        is_null($type) ? $type = 'Campaign' : '';
        $maxId = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('c.id')
            ->from('AppBundle:'.$type, 'c')
            ->orderBy('c.id', 'DESC')
            ->setMaxResults(1)
            ->getQuery()->getOneOrNullResult()
            ;
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('adef')
            ->from('AppBundle:AttributesDefinition', 'adef')
            ->where('adef.belongsToObject = :objn')
            ->andWhere('adef.objectName = :objName')
            ->orderBy('adef.moderatorSortOrder', 'ASC')
            ->setParameter('objn', $maxId['id'])
            ->setParameter('objName', $type)
//            ->setMaxResults(1)
            ->getQuery()->getResult()
            ;
    }

    /**
     * @param $label
     * @param $objectName
     * @param $belongsToObject
     */
    public function updateAllIsPublick(){

        $this->getEntityManager()
            ->createQueryBuilder()
            ->update('AppBundle:AttributesDefinition', 'ad')
            ->set('ad.isPublic', ':isp')
            ->setParameter('isp', 1)
            ->getQuery()->execute()
        ;
    }

    /**
     * @param $label
     * @param $objectName
     * @param $belongsToObject
     */
    public function updateOrdering($attrName, $state){

        $this->getEntityManager()
            ->createQueryBuilder()
            ->update('AppBundle:AttributesDefinition', 'ad')
            ->set('ad.moderatorSortOrder', ':isp')
            ->where('ad.attrName = :attrN')
            ->setParameter('isp', $state)
            ->setParameter('attrN', $attrName)
            ->getQuery()->execute()
        ;
    }

    /**
     * Tihi repo update AttributesDefinition status
     * @param $id
     * @param $status
     * @param $belongsToObject
     */
    public function updateStatus($id, $status){

        $this->getEntityManager()
            ->createQueryBuilder()
            ->update('AppBundle:AttributesDefinition', 'ad')
            ->set('ad.status', ':st')
            ->where('ad.id = :id')
            ->setParameter('id', $id)
            ->setParameter('st', $status)
            ->getQuery()->execute()
        ;
    }

    /**
     * Tihi repo update AttributesDefinition status
     * @param $id
     * @param $status
     * @param $belongsToObject
     */
    public function updateModerator($id, $status){

        $this->getEntityManager()
            ->createQueryBuilder()
            ->update('AppBundle:AttributesDefinition', 'ad')
            ->set('ad.moderatorSortOrder', ':st')
            ->where('ad.id = :id')
            ->setParameter('id', $id)
            ->setParameter('st', $status)
            ->getQuery()->execute()
        ;
    }


}
