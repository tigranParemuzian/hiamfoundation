<?php

namespace AppBundle\Repository;

use AppBundle\Entity\AttributesDefinition;

/**
 * CollectionValuesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CollectionValuesRepository extends \Doctrine\ORM\EntityRepository
{

    public function findDataById($cid){
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('cv, lv, ld, lt, li, lf, settings, attributesDefinition')
            ->from('AppBundle:CollectionValues', 'cv')
            ->leftJoin('cv.listValues', 'lv')
            ->leftJoin('lv.settings', 'settings')
            ->leftJoin('settings.attributesDefinition', 'attributesDefinition')
            ->leftJoin('lv.date', 'ld')
            ->leftJoin('lv.text', 'lt')
            ->leftJoin('lv.image', 'li')
            ->leftJoin('lv.file', 'lf')
            ->where('cv.id = :cId')
            ->setParameter('cId', $cid)
            ->setParameter('objName', AttributesDefinition::IS_LIST)
            ->getQuery()->getResult()
            ;
    }

    public function findForThisCmp($type, $objectId){
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('clv, lv')
            ->from('AppBundle:CollectionValues', 'clv')
            ->leftJoin('clv.listValues', 'lv')
            ->where('clv.belongsToObject = :objId')
            ->andWhere('clv.belongsToObjectName = :obType')
            ->orderBy('lv.id', 'ASC')
            ->setParameter('objId', $objectId)
            ->setParameter('obType', $type)
            ->setMaxResults(1)
            ->getQuery()->getOneOrNullResult()

            ;
    }

    public function findForThisCmpAll($type, $objectId){
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('clv, lv')
            ->from('AppBundle:CollectionValues', 'clv')
            ->leftJoin('clv.listValues', 'lv')
            ->where('clv.belongsToObject = :objId')
            ->andWhere('clv.belongsToObjectName = :obType')
            ->orderBy('lv.id', 'ASC')
            ->setParameter('objId', $objectId)
            ->setParameter('obType', $type)
//            ->setMaxResults(1)
            ->getQuery()->getResult()

            ;
    }

    /**
     * @param $label
     * @param $objectName
     * @param $belongsToObject
     */
    public function updateByAttributesDefinition($oldLabel, $label, $objectName, $belongsToObject){

        $this->getEntityManager()
            ->createQueryBuilder()
            ->update('AppBundle:CollectionValues', 'cv')
            ->set('cv.name', ':lb')
            ->where('cv.belongsToObjectName = :objName')
            ->andWhere('cv.name = :oldLb')
            ->andWhere('cv.belongsToObject = :objid')
            ->setParameter('lb', $label)
            ->setParameter('objName', $objectName)
            ->setParameter('objid', $belongsToObject)
            ->setParameter('oldLb', $oldLabel)
            ->getQuery()->execute()
            ;
    }

    /**
     * This repository use to get old data AppBundle:CollectionValues
     * for cloning
     *
     * @param $type
     * @param $label
     * @return array
     */
    public function findOld($type, $label){

        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('clv, lv')
            ->from('AppBundle:CollectionValues', 'clv')
            ->leftJoin('clv.listValues', 'lv')
            ->andWhere('clv.belongsToObjectName = :obType')
            ->andWhere('clv.label = :lb')
            ->orderBy('clv.id', 'ASC')
            ->setParameter('obType', $type)
            ->setParameter('lb', $label)
            ->setMaxResults(1)
            ->getQuery()->getResult()

            ;
    }

    /**
     * This repository use to get old data AppBundle:CollectionValues
     * for cloning
     *
     * @param $cId
     * @return array
     */
    public function findByCmp($cId){

        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('clv, lv')
            ->from('AppBundle:CollectionValues', 'clv')
            ->leftJoin('clv.listValues', 'lv')
            ->andWhere('clv.belongsToObjectName = :obType')
            ->andWhere('clv.belongsToObject = :cid')
            ->orderBy('clv.id', 'ASC')
            ->setParameter('obType', AttributesDefinition::IS_CAMPAIGN)
            ->setParameter('cid', $cId)
            ->getQuery()->getResult()

            ;
    }

    /**
     * This repository use to get old data AppBundle:CollectionValues
     * for cloning
     *
     * @param $cId
     * @return array
     */
    public function findByBelonbObject($type, $cId){

        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('clv, lv')
            ->from('AppBundle:CollectionValues', 'clv')
            ->leftJoin('clv.listValues', 'lv')
            ->where('clv.belongsToObjectName = :obType')
            ->andWhere('clv.belongsToObject = :cid')
            ->orderBy('clv.id', 'ASC')
            ->setParameter('obType', $type)
            ->setParameter('cid', $cId)
            ->getQuery()->getResult()

            ;
    }


    /**
     * This repository use to get old data AppBundle:CollectionValues
     * for cloning
     *
     * @param $cId
     * @return array
     */
    public function findForViuew($type, $cId, $label){

        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('clv, lv, im, fl, txt, dt, bv')
            ->from('AppBundle:CollectionValues', 'clv')
            ->leftJoin('clv.listValues', 'lv')
            ->leftJoin('lv.image', 'im')
            ->leftJoin('lv.file', 'fl')
            ->leftJoin('lv.text', 'txt', 'WITH', 'txt.value IS NOT NULL')
            ->leftJoin('lv.date', 'dt', 'WITH', 'dt.value IS NOT NULL')
            ->leftJoin('lv.boolean', 'bv', 'WITH', 'bv.value IS NOT NULL')
            ->where('clv.name = :lb')
            ->andWhere('clv.belongsToObjectName = :obType')
            ->andWhere('clv.belongsToObject = :cid')
            ->orderBy('clv.id', 'ASC')
            ->setParameter('lb', $label)
            ->setParameter('obType', $type)
            ->setParameter('cid', $cId)
            ->getQuery()->getResult()

            ;
    }

    /**
     * @param $label
     * @param $objectId
     * @param $objectName
     * @return mixed
     */
    public function findUniq($label, $objectId, $objectName){

        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('lv')
            ->from('AppBundle:CollectionValues', 'lv')
            ->where('lv.belongsToObject = :objId')
            ->andWhere('lv.name = :lb')
            ->andWhere('lv.belongsToObjectName = :objName')
            ->setParameter('objName', $objectName)
            ->setParameter('objId', $objectId)
            ->setParameter('lb', $label)
            ->getQuery()
            ->getOneOrNullResult()
            ;
    }


    /**
     * @param $label
     * @param $objectId
     * @param $objectName
     * @return mixed
     */
    public function findAmbasador($label, $objectId, $objectName){

        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('lv, listValues, lb, tx, im, pamphlet, fl')
            ->from('AppBundle:CollectionValues', 'lv')
            ->leftJoin('lv.listValues', 'listValues')
            ->leftJoin('listValues.boolean', 'lb')
            ->leftJoin('listValues.image', 'im')
            ->leftJoin('listValues.text', 'tx')
            ->leftJoin('AppBundle:ListValues', 'pamphlet', 'WITH', 'pamphlet.belongsToObject = :objId')
            ->leftJoin('pamphlet.file', 'fl')
            ->where('lv.belongsToObject = :objId')
            ->andWhere('lv.name = :lbl')
            ->andWhere('lv.belongsToObjectName = :objName')
//            ->andWhere('tx.title = :tlt')
//            ->andWhere('tx.value = :vl')
            ->andWhere('pamphlet.name = :fname')
            ->setParameter('objName', $objectName)
            ->setParameter('objId', $objectId)
            ->setParameter('lbl', $label)
//            ->setParameter('tlt', 'Member Position')
            ->setParameter('fname', 'Pamphlet')
//            ->setParameter('vl', 'Ambassador')
            ->getQuery()
            ->getResult()
            ;
    }

    /**
     * @param $objectId
     * @param $objectName
     * @return mixed
     */
    public function findInterviewer($objectId, $objectName){

        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('lv, listValues, lb, tx, im')
            ->from('AppBundle:CollectionValues', 'lv')
            ->leftJoin('lv.listValues', 'listValues')
            ->leftJoin('listValues.boolean', 'lb')
            ->leftJoin('listValues.image', 'im')
            ->leftJoin('listValues.text', 'tx')
           // ->leftJoin('AppBundle:ListValues', 'pamphlet', 'WITH', 'pamphlet.belongsToObject = :objId')
            //->leftJoin('pamphlet.file', 'fl')
            ->where('lv.belongsToObject = :objId')
            ->andWhere('lv.name = :lb')
            ->andWhere('lv.belongsToObjectName = :objName')
            ->andWhere('lb.value = :st')
            ->andWhere('lb.title = :tlt')
            //->andWhere('pamphlet.name = :fname')
            ->setParameter('objName', $objectName)
            ->setParameter('objId', $objectId)
            ->setParameter('lb', 'Interviewers')
            ->setParameter('st', 1)
            ->setParameter('tlt', 'Active')
            //->setParameter('fname', 'Pamphlet')
            ->getQuery()
            ->getResult()
            ;
    }
    /**
     * @param $objectName
     * @param $objectId
     * @return array
     */
    public function findPageData($objectName, $objectId){

         return $this->getEntityManager()
             ->createQueryBuilder()
             ->select('lv')
             ->from('AppBundle:CollectionValues', 'lv')
             ->where('lv.belongsToObject = :objId')
             ->andWhere('lv.belongsToObjectName = :objName')
             ->setParameter('objName', $objectName)
             ->setParameter('objId', $objectId)
             ->getQuery()
             ->getResult()
             ;
    }
}
