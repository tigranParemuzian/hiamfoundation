<?php

namespace AppBundle\Repository;

use AppBundle\Entity\AttributesDefinition;

/**
 * ListValuesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ListValuesRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     *
     */
    public function findForThisCmp($type, $objId){

        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('lv, im, fl, txt, dt')
            ->from('AppBundle:ListValues', 'lv')
            ->leftJoin('lv.image', 'im')
            ->leftJoin('lv.file', 'fl')
            ->leftJoin('lv.text', 'txt')
            ->leftJoin('lv.date', 'dt')
            ->where('lv.belongsToObject = :oid')
            ->andWhere('lv.belongsToObjectName = :tdif')
            ->setParameter('oid', $objId)
            ->setParameter('tdif', $type)
            ->getQuery()
            ->getResult()
            ;
    }

    public function findProgress($type, $objId){

        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('lv, im, fl, txt, dt, ad')
            ->from('AppBundle:ListValues', 'lv')
            ->leftJoin('lv.image', 'im')
            ->leftJoin('lv.file', 'fl')
            ->leftJoin('lv.text', 'txt')
            ->leftJoin('lv.date', 'dt')
            ->join('AppBundle:AttributesDefinition', 'ad', 'WITH', 'ad.belongsToObject = lv.id')
            ->where('lv.belongsToObject = :onjId')
            ->andWhere('lv.belongsToObjectName = :objName')
            ->andWhere('ad.objectName = :lvty')
            ->orderBy('lv.id')
            ->setParameter('onjId', $objId)
            ->setParameter('objName', $type)
            ->setParameter('lvty', AttributesDefinition::IS_LIST)
            ->getQuery()
            ->getResult()
            ;

    }

    public function findMaxId(){
        return $this->getEntityManager()->createQueryBuilder()
            ->select('lv')
            ->from('AppBundle:ListValues','lv')
            ->orderBy('lv.id', 'DESC')
            ->setMaxResults(1)
            ->getQuery()->getOneOrNullResult();

    }

    /**
     * @param $label
     * @param $objectName
     * @param $belongsToObject
     */
    public function updateByAttributesDefinition($oldLabel, $label, $objectName, $belongsToObject){


        $this->getEntityManager()
            ->createQueryBuilder()
            ->update('AppBundle:ListValues', 'cv')
            ->set('cv.name', ':lb')
            ->where('cv.belongsToObjectName = :objName')
            ->andWhere('cv.name = :oldLb')
            ->andWhere('cv.belongsToObject = :objid')
            ->setParameter('lb', $label)
            ->setParameter('objName', $objectName)
            ->setParameter('objid', $belongsToObject)
            ->setParameter('oldLb', $oldLabel)
            ->getQuery()->execute()
        ;
    }

    /**
     *
     */
    public function findByLabelAndType($type, $label){

        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('MIN(lv.id) as id ')
            ->from('AppBundle:ListValues', 'lv')
            ->where('lv.label = :lb')
            ->andWhere('lv.belongsToObjectName = :tdif')
            ->setParameter('lb', $label)
            ->setParameter('tdif', $type)
            ->getQuery()
            ->getOneOrNullResult()
            ;
    }

    /**
     * This repository use to get old data AppBundle:CollectionValues
     * for cloning
     *
     * @param $cId
     * @return array
     */
    public function findForViuew($type, $cId, $label){

        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('lv,bv,im, fl, txt, dt, settings, attrDef')
            ->from('AppBundle:ListValues', 'lv')
            ->leftJoin('lv.settings','settings')
            ->leftJoin('settings.attributesDefinition','attrDef')
            ->leftJoin('lv.image', 'im', 'WITH' ,'im.fileName IS NOT NULL AND LENGTH(im.fileName)>1 ')
            ->leftJoin('lv.file', 'fl', 'WITH' ,'fl.fileName IS NOT NULL AND LENGTH(fl.fileName)>1')
            ->leftJoin('lv.text', 'txt', 'WITH' ,'txt.value IS NOT NULL AND LENGTH(txt.value) >1 AND txt.value != txt.title ')
            ->leftJoin('lv.date', 'dt', 'WITH' ,'dt.value IS NOT NULL')
            ->leftJoin('lv.boolean', 'bv')
            ->where('lv.name = :lb')
            ->andWhere('settings.isEnable = 1')
            ->orderBy('settings.sortOrdering')
            ->addOrderBy('dt.value')
            ->andWhere('lv.belongsToObjectName = :obType')
            ->andWhere('lv.belongsToObject = :cid')
            ->orderBy('lv.id', 'ASC')
            ->setParameter('lb', $label)
            ->setParameter('obType', $type)
            ->setParameter('cid', $cId)
            ->getQuery()->getResult()

            ;
    }

    /**
     * This repository use to get old data AppBundle:CollectionValues
     * for cloning
     *
     * @param $slug
     * @return array
     */
    public function findInterviewers($slug){

        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('lv,bv,im, fl, txt, dt, settings, attrDef')
            ->from('AppBundle:ListValues', 'lv')
            ->leftJoin('lv.settings','settings')
            ->leftJoin('settings.attributesDefinition','attrDef')
            ->leftJoin('lv.image', 'im', 'WITH' ,'im.fileName IS NOT NULL AND LENGTH(im.fileName)>1 ')
            ->leftJoin('lv.file', 'fl', 'WITH' ,'fl.fileName IS NOT NULL AND LENGTH(fl.fileName)>1')
            ->leftJoin('lv.text', 'txt', 'WITH' ,'txt.value IS NOT NULL AND LENGTH(txt.value) >1 AND txt.value != txt.title ')
            ->leftJoin('lv.date', 'dt', 'WITH' ,'dt.value IS NOT NULL')
            ->leftJoin('lv.boolean', 'bv')
            ->where('lv.slug = :slg')
            ->andWhere('settings.isEnable = 1')
            ->orderBy('settings.sortOrdering')
            ->addOrderBy('dt.value')
            ->andWhere('lv.belongsToObjectName = :obType')
            ->orderBy('lv.id', 'ASC')
            ->setParameter('slg', $slug)
            ->setParameter('obType', AttributesDefinition::IS_COLLECTION)
            ->getQuery()->getOneOrNullResult()

            ;
    }

    public function findClassyId($objName, $objId){

        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('lv, tlv')
            ->from('AppBundle:ListValues', 'lv')
            ->leftJoin('lv.text', 'tlv')
            ->where('lv.belongsToObject = :objId')
            ->andWhere('lv.name LIKE :lb')
            ->andWhere('lv.belongsToObjectName = :objName')
            ->setParameter('objName', $objName)
            ->setParameter('objId', $objId)
            ->setParameter('lb', '%Classy Campaign Id%')
            ->getQuery()
            ->getOneOrNullResult();
            ;
    }

    /**
     * @param $label
     * @param $objectId
     * @param $objectName
     * @return mixed
     */
    public function findUniq($label, $objectId, $objectName){

        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('lv')
            ->from('AppBundle:ListValues', 'lv')
            ->where('lv.belongsToObject = :objId')
            ->andWhere('lv.name = :lb')
            ->andWhere('lv.belongsToObjectName = :objName')
            ->setParameter('objName', $objectName)
            ->setParameter('objId', $objectId)
            ->setParameter('lb', $label)
            ->getQuery()
            ->getOneOrNullResult();
            ;
    }

    /**
     * Tihi repo update AttributesDefinition status
     * @param $id
     * @param $status
     * @param $belongsToObject
     */
    public function updateModerator($id, $status){

        $this->getEntityManager()
            ->createQueryBuilder()
            ->update('AppBundle:ListValues', 'ad')
            ->set('ad.sortOrdering', ':st')
            ->where('ad.id = :id')
            ->setParameter('id', $id)
            ->setParameter('st', $status)
            ->getQuery()->execute()
        ;
    }

    /**
     * This repository use to get old data AppBundle:CollectionValues
     * for cloning
     *
     * @param $cId
     * @return array
     */
    public function findPageData($type, $cId){

        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('lv, settings, attrDef, bv,im, fl, txt, dt')
            ->from('AppBundle:ListValues', 'lv')
            ->leftJoin('lv.settings','settings')
            ->leftJoin('settings.attributesDefinition','attrDef')
            ->leftJoin('lv.image', 'im')
            ->leftJoin('lv.file', 'fl')
            ->leftJoin('lv.text', 'txt')
            ->leftJoin('lv.date', 'dt')
            ->leftJoin('lv.boolean', 'bv')
            ->where('lv.belongsToObjectName = :obType')
            ->andWhere('lv.belongsToObject = :cid')
            ->andWhere('settings.isEnable = 1')
            ->orderBy('settings.sortOrdering')
            ->addOrderBy('dt.value')
            ->orderBy('lv.id', 'ASC')
            ->setParameter('obType', $type)
            ->setParameter('cid', $cId)
            ->getQuery()->getResult()

            ;
    }
}
